# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b1Bw2FkcDoYLfiTwYjtsmkcqM65uLrcL
"""

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras import layers, models

def load_images_from_folders(*folders):   #function for extracting images from multiple folders and labelling them
    all_images = []
    all_labels = []
    for i, folder in enumerate(folders):
        labels = []
        images = []
        for image in os.listdir(folder):
            img_path = os.path.join(folder, image)
            img = cv2.imread(img_path)
            img = cv2.resize(img, (250, 250))
            images.append(img)
        labels.extend(np.full(len(images), i))
        all_images.extend(images)
        all_labels.extend(labels)
    return np.array(all_images), np.array(all_labels)

images, labels = load_images_from_folders(r"flowers\rose", r"flowers\sunflower")

X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)
X_train = X_train / 255.0
X_test = X_test / 255.0

model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(250, 250, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(1, activation='sigmoid')  # Binary classification
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=10, batch_size=32)

model.evaluate(X_test, y_test)

model.save('binary_flower_classification.h5')

from tensorflow.keras.models import load_model
model = load_model('binary_flower_classification.h5')

def predict(index):
    predicted_prob = model.predict(X_test[[index]])
    predicted_label = "rose" if predicted_prob < 0.5 else "sunflower"
    plt.figure()
    plt.imshow(X_test[index])
    plt.title('Label: ' + predicted_label)
    plt.axis('off')
    plt.show()

predict(207)